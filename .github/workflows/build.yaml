name: build

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1

      - run: bun install --frozen-lockfile
      - run: timeout 12s bun pre-commit
      - run: bun run test
      - run: ./check-lines.sh

      # - name: Bundle size breakdown
      #   run: |
      #     bun run build --sourcemap true
      #     node src/ci/dependency_report.cjs dist/ | column -t -s ":"
      # - run: ./check-bundle-size.sh

      # - name: Start server
      #   run: bun run dev &
      #   env:
      #     PORT: 3000

      # - name: Wait for server to start
      #   run: |
      #     echo "Waiting for server to start..."
      #     until curl -s http://localhost:3000 > /dev/null; do
      #       sleep 1
      #     done

      - name: Run Lighthouse CI
        id: lighthouse
        continue-on-error: true
        run: |
          npx @lhci/cli@0.11.x autorun --config=./lighthouserc.json --verbose
          echo "LHCI_EXIT_CODE=$?" >> $GITHUB_OUTPUT

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci

      - name: Check Lighthouse CI status
        if: steps.lighthouse.outputs.LHCI_EXIT_CODE != '0'
        run: exit 1

      - name: Stop server
        run: kill $(jobs -p)

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1

      - run: bun install --frozen-lockfile

      - run: bun run build

      - name: Upload built project
        uses: actions/upload-artifact@v4
        with:
          path: ./dist
          overwrite: true
          retention-days: 1
          name: build-artifacts-${{ github.run_id }}

      - name: Deploy to Cloudflare Pages
        if: github.ref == 'refs/heads/master' && github.repository == 'commaai/new-connect'
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_PAGES_TOKEN }}
          command: pages deploy dist --project-name=connect --branch=new-connect --commit-dirty=true
